#!/usr/bin/env python3
import sys, time, os, math, zlib, logging, random
import chess, chess.polyglot, chess.syzygy

# === Logging Setup ===
logging.basicConfig(filename='engine.log', level=logging.INFO)
logger = logging.getLogger(__name__)

# === UCI Config Options ===
uci_options = {
    "Threads": 1,
    "Hash": 128,
    "Move Overhead": 100,
    "Max Nodes": 0,
    "BookPath": "book.bin",
    "SyzygyPath": "syzygy"
}

# === Constants ===
MAX_DEPTH = 64
MATE_VALUE = 100000
TIME_LIMIT = 3.0
LMR_BASE = 0.75
LMR_DIVISOR = 2.0
NULL_MOVE_REDUCTION = 3
FUTILITY_MARGIN = 100
ASPIRATION_WINDOW = 50

# === Zobrist Hashing ===
zobrist_keys = [[random.getrandbits(64) for _ in range(12)] for _ in range(64)]
zobrist_en_passant = [random.getrandbits(64) for _ in range(8)]
zobrist_castling = [random.getrandbits(64) for _ in range(4)]
zobrist_side = random.getrandbits(64)

# === Transposition Table ===
class TTEntry:
    __slots__ = ('key', 'depth', 'score', 'bound', 'best_move')
    def __init__(self, key, depth, score, bound, best_move):
        self.key = key
        self.depth = depth
        self.score = score
        self.bound = bound  # 'EXACT', 'LOWER', 'UPPER'
        self.best_move = best_move

transposition_table = {}

def compute_zobrist_key(board):
    key = 0
    # Pieces
    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece:
            piece_type = piece.piece_type - 1  # 0-5 (PAWN=0, KING=5)
            color_offset = 0 if piece.color == chess.WHITE else 6
            key ^= zobrist_keys[square][color_offset + piece_type]
    # En passant
    if board.ep_square:
        key ^= zobrist_en_passant[chess.square_file(board.ep_square)]
    # Castling rights
    key ^= zobrist_castling[0] if board.has_queenside_castling_rights(chess.WHITE) else 0
    key ^= zobrist_castling[1] if board.has_kingside_castling_rights(chess.WHITE) else 0
    key ^= zobrist_castling[2] if board.has_queenside_castling_rights(chess.BLACK) else 0
    key ^= zobrist_castling[3] if board.has_kingside_castling_rights(chess.BLACK) else 0
    # Side to move
    if board.turn == chess.BLACK:
        key ^= zobrist_side
    return key

# === Global State ===
pawn_hash_table = {}
history_heuristic = {}
killer_moves = [[None]*2 for _ in range(100)]
counter_moves = {}
node_count = 0
NODE_LIMIT = None
polyglot_book = None
syzygy_tb = None
principal_variation = {}

# === Piece Values (MG/EG) ===
PIECE_VALUES = {
    chess.PAWN: [100, 120],
    chess.KNIGHT: [320, 350],
    chess.BISHOP: [330, 360],
    chess.ROOK: [500, 600],
    chess.QUEEN: [900, 1100],
    chess.KING: [20000, 20000]
}

# === PST (Midgame & Endgame) ===
PST = {
    chess.PAWN: [
        # Midgame
        [   0,   0,   0,   0,   0,   0,   0,   0,
            5,  10,  10, -20, -20,  10,  10,   5,
            5,  -5, -10,   0,   0, -10,  -5,   5,
            0,   0,   0,  20,  20,   0,   0,   0,
            5,   5,  10,  25,  25,  10,   5,   5,
           10,  10,  20,  30,  30,  20,  10,  10,
           50,  50,  50,  50,  50,  50,  50,  50,
            0,   0,   0,   0,   0,   0,   0,   0
        ],
        # Endgame
        [   0,   0,   0,   0,   0,   0,   0,   0,
           10,  20,  20,  20,  20,  20,  20,  10,
           10,  15,  15,  15,  15,  15,  15,  10,
           15,  20,  20,  30,  30,  20,  20,  15,
           20,  25,  25,  35,  35,  25,  25,  20,
           30,  35,  35,  40,  40,  35,  35,  30,
           50,  50,  50,  50,  50,  50,  50,  50,
            0,   0,   0,   0,   0,   0,   0,   0
        ]
    ],
    chess.KNIGHT: [
        # Midgame
        [ -50, -40, -30, -30, -30, -30, -40, -50,
          -40, -20,   0,   5,   5,   0, -20, -40,
          -30,   0,  10,  15,  15,  10,   0, -30,
          -30,   5,  15,  20,  20,  15,   5, -30,
          -30,   0,  15,  20,  20,  15,   0, -30,
          -30,   5,  10,  15,  15,  10,   5, -30,
          -40, -20,   0,   5,   5,   0, -20, -40,
          -50, -40, -30, -30, -30, -30, -40, -50
        ],
        # Endgame
        [ -50, -40, -30, -30, -30, -30, -40, -50,
          -40, -20,   0,   0,   0,   0, -20, -40,
          -30,   0,  15,  20,  20,  15,   0, -30,
          -30,   5,  20,  25,  25,  20,   5, -30,
          -30,   0,  20,  25,  25,  20,   0, -30,
          -30,   5,  15,  20,  20,  15,   5, -30,
          -40, -20,   0,   0,   0,   0, -20, -40,
          -50, -40, -30, -30, -30, -30, -40, -50
        ]
    ],
    chess.BISHOP: [
        # Midgame
        [ -20, -10, -10, -10, -10, -10, -10, -20,
          -10,   0,   0,   0,   0,   0,   0, -10,
          -10,   0,   5,  10,  10,   5,   0, -10,
          -10,   5,   5,  10,  10,   5,   5, -10,
          -10,   0,  10,  10,  10,  10,   0, -10,
          -10,  10,  10,  10,  10,  10,  10, -10,
          -10,   5,   0,   0,   0,   0,   5, -10,
          -20, -10, -10, -10, -10, -10, -10, -20
        ],
        # Endgame
        [ -20, -10, -10, -10, -10, -10, -10, -20,
          -10,   5,   5,   5,   5,   5,   5, -10,
          -10,   5,  10,  15,  15,  10,   5, -10,
          -10,   5,  15,  20,  20,  15,   5, -10,
          -10,   5,  15,  20,  20,  15,   5, -10,
          -10,   5,  10,  15,  15,  10,   5, -10,
          -10,   0,   5,   5,   5,   5,   0, -10,
          -20, -10, -10, -10, -10, -10, -10, -20
        ]
    ],
    chess.ROOK: [
        # Midgame
        [   0,   0,   0,   5,   5,   0,   0,   0,
           -5,   0,   0,   0,   0,   0,   0,  -5,
           -5,   0,   0,   0,   0,   0,   0,  -5,
           -5,   0,   0,   0,   0,   0,   0,  -5,
           -5,   0,   0,   0,   0,   0,   0,  -5,
           -5,   0,   0,   0,   0,   0,   0,  -5,
            5,  10,  10,  10,  10,  10,  10,   5,
            0,   0,   0,   0,   0,   0,   0,   0
        ],
        # Endgame
        [   5,  10,  10,  10,  10,  10,  10,   5,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0
        ]
    ],
    chess.QUEEN: [
        # Midgame
        [ -20, -10, -10,  -5,  -5, -10, -10, -20,
          -10,   0,   0,   0,   0,   0,   0, -10,
          -10,   0,   5,   5,   5,   5,   0, -10,
           -5,   0,   5,   5,   5,   5,   0,  -5,
            0,   0,   5,   5,   5,   5,   0,  -5,
          -10,   5,   5,   5,   5,   5,   0, -10,
          -10,   0,   5,   0,   0,   0,   0, -10,
          -20, -10, -10,  -5,  -5, -10, -10, -20
        ],
        # Endgame
        [ -10,  -5,  -5,  -5,  -5,  -5,  -5, -10,
           -5,   0,   0,   0,   0,   0,   0,  -5,
           -5,   0,  10,  10,  10,  10,   0,  -5,
           -5,   0,  10,  20,  20,  10,   0,  -5,
           -5,   0,  10,  20,  20,  10,   0,  -5,
           -5,   0,  10,  10,  10,  10,   0,  -5,
           -5,   0,   0,   0,   0,   0,   0,  -5,
          -10,  -5,  -5,  -5,  -5,  -5,  -5, -10
        ]
    ],
    chess.KING: [
        # Midgame
        [ -30, -40, -40, -50, -50, -40, -40, -30,
          -30, -40, -40, -50, -50, -40, -40, -30,
          -30, -40, -40, -50, -50, -40, -40, -30,
          -30, -40, -40, -50, -50, -40, -40, -30,
          -20, -30, -30, -40, -40, -30, -30, -20,
          -10, -20, -20, -20, -20, -20, -20, -10,
           20,  20,   0,   0,   0,   0,  20,  20,
           20,  30,  10,   0,   0,  10,  30,  20
        ],
        # Endgame
        [ -50, -40, -30, -20, -20, -30, -40, -50,
          -30, -20, -10,   0,   0, -10, -20, -30,
          -30, -10,  20,  30,  30,  20, -10, -30,
          -30, -10,  30,  40,  40,  30, -10, -30,
          -30, -10,  30,  40,  40,  30, -10, -30,
          -30, -10,  20,  30,  30,  20, -10, -30,
          -30, -30,   0,   0,   0,   0, -30, -30,
          -50, -30, -30, -30, -30, -30, -30, -50
        ]
    ]
}

# === Evaluation Parameters ===
PASSED_PAWN = [[0, 10, 30, 50, 75, 100, 150], [0, 20, 40, 70, 120, 200, 300]]

# The rest of the code remains unchanged from previous implementation.
# === Static Exchange Evaluation ===

def static_exchange_eval(board, move):
    """
    Full Static Exchange Evaluation (SEE): recursively evaluates material outcome
    of a capture sequence on move.to_square.
    """
    if not board.is_capture(move):
        return 0

    target_square = move.to_square
    gain = []

    # Get value of captured piece
    captured_piece = board.piece_at(target_square)
    if not captured_piece:
        return 0
    gain.append(PIECE_VALUES[captured_piece.piece_type][0])

    # Track attackers
    attackers = {chess.WHITE: set(), chess.BLACK: set()}
    for color in [chess.WHITE, chess.BLACK]:
        for sq in board.attackers(color, target_square):
            attackers[color].add(sq)

    # Apply the first move
    board.push(move)
    us = not board.turn  # The side that made the move
    side = us

    def next_attacker(side, occupied):
        min_val = float("inf")
        candidate = None
        for sq in attackers[side]:
            piece = board.piece_at(sq)
            if piece and chess.BB_SQUARES[sq] & occupied:
                val = PIECE_VALUES[piece.piece_type][0]
                if val < min_val:
                    min_val = val
                    candidate = sq
        return candidate

    # Simulate captures recursively
    occupied = board.occupied_co[chess.WHITE] | board.occupied_co[chess.BLACK]
    while True:
        sq = next_attacker(side, occupied)
        if sq is None:
            break

        piece = board.piece_at(sq)
        if not piece:
            attackers[side].remove(sq)
            continue

        gain.append(PIECE_VALUES[piece.piece_type][0] - gain[-1])
        occupied ^= chess.BB_SQUARES[sq]
        attackers[side].remove(sq)
        side = not side

    board.pop()

    # Backward minimax over gain list
    for i in range(len(gain) - 2, -1, -1):
        gain[i] = max(-gain[i + 1], gain[i])

    return gain[0]

# === Move Ordering ===
def score_move(board, move, pv_move, depth, ply):
    if move == pv_move:
        return 1000000
    if board.is_capture(move):
        return 100000 + static_exchange_eval(board, move)
    if move in killer_moves[ply]:
        return 90000
    if move in counter_moves.get(board.peek().uci() if board.move_stack else '', []):
        return 80000
    return history_heuristic.get((move.from_square, move.to_square), 0)

def order_moves(board, moves, pv_move, depth, ply):
    return sorted(moves, key=lambda m: -score_move(board, m, pv_move, depth, ply))

# === Evaluation ===
def game_phase(board):
    phase = 0
    for piece in [chess.KNIGHT, chess.BISHOP, chess.ROOK, chess.QUEEN]:
        phase += len(board.pieces(piece, chess.WHITE)) + len(board.pieces(piece, chess.BLACK))
    return min(phase * 16, 256)

def interpolate(mg, eg, phase):
    return (mg * (256 - phase) + eg * phase) // 256

def king_safety(board, color):
    king_sq = board.king(color)
    if king_sq is None:
        return -10000  # king is missing

    penalty = 0

    # 1. Check attackers in the king's zone
    zone = chess.SquareSet(chess.BB_KING_ATTACKS[king_sq])
    attackers = sum(1 for sq in zone if board.is_attacked_by(not color, sq))
    penalty -= 15 * attackers

    # 2. Missing pawn shield (files: f, g, h for kingside; c, b, a for queenside)
    rank_direction = -8 if color == chess.WHITE else 8
    for offset in [rank_direction, rank_direction - 1, rank_direction + 1]:
        sq = king_sq + offset
        if sq in chess.SQUARES:
            piece = board.piece_at(sq)
            if not piece or piece.piece_type != chess.PAWN or piece.color != color:
                penalty -= 10

    # 3. Open/semi-open files near king
    king_file = chess.square_file(king_sq)
    for df in [-1, 0, 1]:  # adjacent files
        file = king_file + df
        if 0 <= file <= 7:
            pawns = [sq for sq in chess.SQUARES if chess.square_file(sq) == file and board.piece_at(sq) == chess.Piece(chess.PAWN, color)]
            if not pawns:
                penalty -= 12  # open file
            elif len(pawns) == 1:
                penalty -= 6  # semi-open

    # 4. Penalize if king is uncastled (still on e1/e8) and not protected
    if color == chess.WHITE and king_sq == chess.E1:
        penalty -= 10
    elif color == chess.BLACK and king_sq == chess.E8:
        penalty -= 10

    # 5. Tactical threats: pins, skewers, x-rays
    for square in chess.SQUARES:
        piece = board.piece_at(square)
        if piece and piece.color == color:
            # Check if this piece is pinned
            if board.is_pinned(color, square):
                penalty -= 10
            # X-ray attacks and skewers
            for attacker_sq in board.attackers(not color, square):
                attacker = board.piece_at(attacker_sq)
                if attacker and attacker.piece_type in [chess.QUEEN, chess.ROOK, chess.BISHOP]:
                    # Check for a piece behind
                    line = board.trace(attacker_sq, square)
                    if line:
                        behind_sq = line[-1]
                        behind_piece = board.piece_at(behind_sq)
                        if behind_piece and behind_piece.color == color:
                            penalty -= 8  # potential x-ray or skewer
            # Cross-pins (rarer, simplified as overlapping pins)
            if board.is_pinned(color, square):
                for dir_pin in [chess.BB_DIAGONALS[square], chess.BB_FILES[chess.square_file(square)], chess.BB_RANKS[chess.square_rank(square)]]:
                    if king_sq in dir_pin:
                        penalty -= 5  # pin direction toward king

    return penalty

def evaluate_pawn_structure(board: chess.Board, color: bool, pawn_hash: dict) -> int:
    # Fast hash using pawn bitboard
    pawn_bb = board.pieces(chess.PAWN, color)
    hash_key = zlib.crc32(pawn_bb.__str__().encode())  # Fast enough for our use

    if hash_key in pawn_hash:
        return pawn_hash[hash_key]

    # === Configurable Scores ===
    isolated_penalty = -15
    doubled_penalty = -10
    backward_penalty = -8
    passed_bonus = [0, 10, 20, 30, 40, 60, 80, 0]  # index by rank
    score = 0

    files = [[] for _ in range(8)]
    opp_pawns = board.pieces(chess.PAWN, not color)

    for square in pawn_bb:
        file = chess.square_file(square)
        files[file].append(square)

    for f in range(8):
        pawns = files[f]
        if len(pawns) > 1:
            score += (len(pawns) - 1) * doubled_penalty

        for sq in pawns:
            rank = chess.square_rank(sq) if color == chess.WHITE else 7 - chess.square_rank(sq)

            # Isolated check
            if (f == 0 or not files[f - 1]) and (f == 7 or not files[f + 1]):
                score += isolated_penalty

            # Backward check (simplified)
            forward = chess.square(f, chess.square_rank(sq) + (1 if color == chess.WHITE else -1))
            if board.piece_at(forward) is None:
                if (f > 0 and not files[f - 1]) or (f < 7 and not files[f + 1]):
                    score += backward_penalty

            # Passed pawn check (no opposing pawn in front or adjacent files)
            passed = True
            for df in [-1, 0, 1]:
                nf = f + df
                if 0 <= nf <= 7:
                    for opp_sq in board.pieces(chess.PAWN, not color):
                        opp_file = chess.square_file(opp_sq)
                        opp_rank = chess.square_rank(opp_sq) if color == chess.WHITE else 7 - chess.square_rank(opp_sq)
                        if opp_file == nf and opp_rank >= rank:
                            passed = False
            if passed:
                score += passed_bonus[min(rank, 7)]

    pawn_hash[hash_key] = score
    return score

def evaluate_space(board: chess.Board, color: bool) -> int:
    # Center and semi-center squares (based on GM heuristics)
    center = [chess.E4, chess.D4, chess.E5, chess.D5]
    semi_center = [chess.C3, chess.C4, chess.C5, chess.C6, chess.D3, chess.E3, chess.F3,
                   chess.F4, chess.F5, chess.F6, chess.E6, chess.D6]

    score = 0
    occupied = board.occupied_co[color]
    opp_territory = range(4, 8) if color == chess.WHITE else range(0, 4)

    attacked_squares = set()
    for square in board.occupied_co[color]:
        piece = board.piece_at(square)
        if not piece or piece.piece_type == chess.PAWN:
            continue  # Ignore pawns for space
        attacked_squares.update(board.attacks(square))

    for sq in attacked_squares:
        rank = chess.square_rank(sq)
        if rank in opp_territory:
            bonus = 1
            if sq in center:
                bonus += 4
            elif sq in semi_center:
                bonus += 2
            score += bonus

    return score
def tactical_threat_score(board, color):
    score = 0
    their_color = not color
    pieces = board.piece_map()

    for sq, piece in pieces.items():
        if piece.color != color:
            continue

        attackers = board.attacks(sq)
        for target in attackers:
            target_piece = board.piece_at(target)

            if target_piece and target_piece.color == their_color:
                # Good capture (SEE > 0)
                see = static_exchange_eval(board, chess.Move(sq, target))
                if see > 0:
                    score += see // 2

                # Skewer
                between = chess.SquareSet(chess.BB_BETWEEN[sq][target]) & board.occupied
                if len(between) == 1:
                    behind_sq = list(between)[0]
                    behind_piece = board.piece_at(behind_sq)
                    if behind_piece and behind_piece.color == their_color:
                        front_val = PIECE_VALUES[target_piece.piece_type][0]
                        behind_val = PIECE_VALUES[behind_piece.piece_type][0]
                        if behind_val > front_val:
                            score += (behind_val - front_val) // 2

                # Pin detection
                if board.is_pinned(their_color, target):
                    score += PIECE_VALUES[target_piece.piece_type][0] // 2

            elif not target_piece and not board.is_attacked_by(their_color, target):
                # Hanging square (undefended)
                score += 10

        # X-ray check or discovery
        if piece.piece_type in [chess.BISHOP, chess.ROOK, chess.QUEEN]:
            line = board.attacks(sq)
            blockers = [t for t in line if board.piece_at(t)]
            if len(blockers) == 1:
                blocker_sq = blockers[0]
                blocker_piece = board.piece_at(blocker_sq)
                if blocker_piece and blocker_piece.color == their_color:
                    move = chess.Move(sq, blocker_sq)
                    if board.is_legal(move):
                        board.push(move)
                        if board.is_check():
                            score += 30
                        board.pop()

        # Forks (not just knight)
        fork_targets = [t for t in board.attacks(sq) if board.piece_at(t) and board.piece_at(t).color == their_color and PIECE_VALUES[board.piece_at(t).piece_type][0] >= 300]
        if len(fork_targets) >= 2:
            score += 50

    return score

def evaluate(board):
    phase = game_phase(board)
    score = 0
    for pt in PIECE_VALUES:
        white = len(board.pieces(pt, chess.WHITE))
        black = len(board.pieces(pt, chess.BLACK))
        score += interpolate(PIECE_VALUES[pt][0], PIECE_VALUES[pt][1], phase) * (white - black)
        for sq in board.pieces(pt, chess.WHITE):
            score += interpolate(PST[pt][0][sq], PST[pt][1][sq], phase)
        for sq in board.pieces(pt, chess.BLACK):
            mirror = chess.square_mirror(sq)
            score -= interpolate(PST[pt][0][mirror], PST[pt][1][mirror], phase)
    score += evaluate_pawn_structure(board, chess.WHITE, pawn_hash_table)
    score -= evaluate_pawn_structure(board, chess.BLACK, pawn_hash_table)
    score += king_safety(board, chess.WHITE)
    score -= king_safety(board, chess.BLACK)
    score += tactical_threat_score(board, board.turn)
    score -= tactical_threat_score(board, not board.turn)
    score += evaluate_space(board, us) - evaluate_space(board, them)

    return score if board.turn == chess.WHITE else -score

# === Quiescence Search ===
def quiescence(board, alpha, beta):
    global node_count
    stand_pat = evaluate(board)
    if stand_pat >= beta:
        return beta
    if alpha < stand_pat:
        alpha = stand_pat
    for move in board.legal_moves:
        if board.is_capture(move):
            board.push(move)
            node_count += 1
            score = -quiescence(board, -beta, -alpha)
            board.pop()
            if score >= beta:
                return beta
            if score > alpha:
                alpha = score
    return alpha


# === Updated Alpha-Beta with Transposition Table ===
def alpha_beta(board, depth, alpha, beta, start_time, max_time, ply=0, can_null=True):
    global node_count
    if time.time() - start_time > max_time:
        raise TimeoutError
    
    # Check transposition table
    zobrist_key = compute_zobrist_key(board)
    tt_entry = transposition_table.get(zobrist_key)
    if tt_entry and tt_entry.depth >= depth:
        if tt_entry.bound == 'EXACT':
            return tt_entry.score
        elif tt_entry.bound == 'LOWER':
            alpha = max(alpha, tt_entry.score)
        elif tt_entry.bound == 'UPPER':
            beta = min(beta, tt_entry.score)
        if alpha >= beta:
            return tt_entry.score
    
    if depth == 0:
        return quiescence(board, alpha, beta)
    
    # Null move pruning
    if can_null and depth >= 3 and not board.is_check():
        board.push(chess.Move.null())
        score = -alpha_beta(board, depth - NULL_MOVE_REDUCTION - 1, -beta, -beta + 1, start_time, max_time, ply + 1, False)
        board.pop()
        if score >= beta:
            return beta
    
    # Futility pruning
    if depth == 1 and not board.is_check() and evaluate(board) + FUTILITY_MARGIN < alpha:
        return alpha
    
    pv_move = tt_entry.best_move if tt_entry else principal_variation.get(board.fen(), None)
    moves = list(board.legal_moves)
    moves = order_moves(board, moves, pv_move, depth, ply)
    
    best_score = -float('inf')
    best_move = None
    for i, move in enumerate(moves):
        board.push(move)
        node_count += 1
        
        # Late Move Reduction
        if i >= 3 and depth >= 3 and not board.is_capture(move) and not board.gives_check():
            reduction = max(0, int(math.log(i) * LMR_BASE / LMR_DIVISOR) - 1)
            reduced_depth = max(1, depth - 1 - reduction)
            score = -alpha_beta(board, reduced_depth, -beta, -alpha, start_time, max_time, ply + 1)
        else:
            score = -alpha_beta(board, depth - 1, -beta, -alpha, start_time, max_time, ply + 1)
        
        board.pop()
        
        if score > best_score:
            best_score = score
            best_move = move
            if score > alpha:
                alpha = score
                if alpha >= beta:
                    # Store in TT
                    transposition_table[zobrist_key] = TTEntry(
                        zobrist_key, depth, alpha, 'LOWER', best_move
                    )
                    # Update killer and history
                    if not board.is_capture(move):
                        killer_moves[ply][1] = killer_moves[ply][0]
                        killer_moves[ply][0] = move
                        history_heuristic[(move.from_square, move.to_square)] = (
                            history_heuristic.get((move.from_square, move.to_square), 0) + depth * depth
                        )
                        if board.move_stack:
                            last_move = board.peek().uci()
                            counter_moves[last_move] = [move]
                    break
    
    # Store in TT
    if best_move:
        bound = 'EXACT' if alpha < best_score < beta else ('LOWER' if best_score >= beta else 'UPPER')
        transposition_table[zobrist_key] = TTEntry(
            zobrist_key, depth, best_score, bound, best_move
        )
        principal_variation[board.fen()] = best_move
    
    return best_score

# === Updated Move Selection with Aspiration Windows ===
def choose_best_move(board, depth=None, wtime=None, btime=None):
    global node_count
    node_count = 0
    best_move = None
    start_time = time.time()
    max_time = TIME_LIMIT
    best_score = None

    # Adjust time control
    if wtime and board.turn == chess.WHITE:
        max_time = min(max_time, wtime / 1000.0 - 0.1)
    elif btime and board.turn == chess.BLACK:
        max_time = min(max_time, btime / 1000.0 - 0.1)
    if max_time < 0.05:
        max_time = 0.05

    max_depth = depth or MAX_DEPTH
    legal_moves = list(board.legal_moves)
    if not legal_moves:
        return None

    # Polyglot book
    if os.path.exists(uci_options.get("BookPath", "")):
        try:
            with chess.polyglot.open_reader(uci_options["BookPath"]) as reader:
                entry = reader.weighted_choice(board)
                return entry.move
        except Exception:
            pass

    # Syzygy tablebase
    if os.path.exists(uci_options.get("SyzygyPath", "")):
        try:
            with chess.syzygy.open_tablebase(uci_options["SyzygyPath"]) as syzygy:
                if board.is_valid() and syzygy.probe_wdl(board) is not None:
                    move = syzygy.probe_dtz(board)[1]
                    if move in board.legal_moves:
                        return move
        except Exception:
            pass

    best_move = random.choice(legal_moves)  # Fallback

    try:
        for d in range(1, max_depth + 1):
            alpha = -MATE_VALUE
            beta = MATE_VALUE
            if best_score is not None and d >= 4:
                alpha = best_score - ASPIRATION_WINDOW
                beta = best_score + ASPIRATION_WINDOW

            for move in legal_moves:
                board.push(move)
                try:
                    score = -alpha_beta(board, d - 1, -beta, -alpha, start_time, max_time)
                    if score <= alpha or score >= beta:
                        alpha = -MATE_VALUE
                        beta = MATE_VALUE
                        score = -alpha_beta(board, d - 1, -beta, -alpha, start_time, max_time)
                finally:
                    board.pop()

                if best_score is None or score > best_score:
                    best_score = score
                    best_move = move

                if best_score >= MATE_VALUE - 100:
                    return best_move

            if time.time() - start_time > max_time * 0.9:
                break
    except TimeoutError:
        pass
    except Exception as e:
        logger.exception("Exception in search")

    if not best_move and legal_moves:
        best_move = random.choice(legal_moves)
    return best_move


def main():
    board = chess.Board()
    while True:
        try:
            line = sys.stdin.readline()
            if not line:
                break
            line = line.strip()
            if line == "uci":
                print("id name SupraTapered")
                print("id author Suprateem")
                print("option name Threads type spin default 1 min 1 max 128")
                print("option name Hash type spin default 128 min 1 max 1024")
                print("option name Move Overhead type spin default 100 min 0 max 5000")
                print("option name Max Nodes type spin default 0 min 0 max 10000000")
                print("option name BookPath type string default book.bin")
                print("option name SyzygyPath type string default syzygy")
                print("uciok")
            elif line == "isready":
                print("readyok")
            elif line.startswith("setoption"):
                parts = line.split()
                if "name" in parts and "value" in parts:
                    name = parts[parts.index("name") + 1]
                    value = " ".join(parts[parts.index("value") + 1:])
                    if name in uci_options:
                        try:
                            if name in ["BookPath", "SyzygyPath"]:
                                uci_options[name] = value
                            else:
                                uci_options[name] = int(value)
                        except ValueError:
                            pass
            elif line.startswith("position"):
                parts = line.split()
                if "startpos" in parts:
                    board.reset()
                    if "moves" in parts:
                        for mv in parts[parts.index("moves") + 1:]:
                            board.push_uci(mv)
                elif "fen" in parts:
                    idx = parts.index("fen")
                    fen = " ".join(parts[idx + 1:idx + 7])
                    board.set_fen(fen)
                    if "moves" in parts:
                        for mv in parts[parts.index("moves") + 1:]:
                            board.push_uci(mv)
            elif line.startswith("go"):
                tokens = line.split()
                wtime = btime = None
                if "wtime" in tokens:
                    try:
                        wtime = int(tokens[tokens.index("wtime") + 1])
                    except:
                        pass
                if "btime" in tokens:
                    try:
                        btime = int(tokens[tokens.index("btime") + 1])
                    except:
                        pass
                try:
                    move = choose_best_move(board, wtime=wtime, btime=btime)
                except Exception as e:
                    logger.exception("Error in choose_best_move")
                    move = None
                if move and isinstance(move, chess.Move):
                    print("bestmove", move.uci())
                else:
                    legal_moves = list(board.legal_moves)
                    if legal_moves:
                        print("bestmove", legal_moves[0].uci())
                    else:
                        print("bestmove 0000")
            elif line == "quit":
                break
            sys.stdout.flush()
        except Exception as e:
            logger.exception("Exception in main loop")
            print(f"info string Engine error: {e}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        import logging
        logging.exception("Engine crashed")
        print(f"info string Engine error: {e}")
        sys.exit(1)
